node n2 {
    type router
    model mdr
    network-config {
	hostname n2
	!
	interface eth0
	 ip address 10.0.1.1/24
	 ipv6 address 2001:1::1/64
	!
	interface eth1
	 ipv6 address 2001:5::1/128
	 ip address 10.0.5.1/24
	!
    }
    canvas c1
    iconcoords {597.0 310.0}
    labelcoords {597.0 342.0}
    interface-peer {eth1 n7}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	/sbin/ip route add 10.0.0.0/24 via 10.0.5.6
	#/sbin/ip route add 3ffe:4::/64 via 2001:1::1
	#/sbin/ip route add 10.9.8.0/24 via 10.0.5.1
	
	
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.1.1/24
	  ipv6 address 2001:1::1/64
	  ipv6 ospf6 instance-id 65
	!
	router ospf6
	  router-id 10.0.1.1
	  interface eth0 area 0.0.0.0
	!
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/ion', )
	files=('setup.sh', )
	cmdup=('sh ./setup.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:setup.sh
	custom-command setup.sh
	config {
	foo=`dirname $SESSION_FILENAME`
	sh $foo/generalSetup.sh
	}
    }
    services {zebra OSPFv3MDR vtysh IPForward StaticRoute SSH UserDefined}
    interface-peer {eth0 n3}
}

node n6 {
    type router
    model mdr
    network-config {
	hostname n6
	!
	interface eth0
	 ip address 10.0.0.2/24
	 ipv6 address 2001:0::2/64
	!
	interface eth1
	 ipv6 address 2001:5::5/128
	 ip address 10.0.5.5/24
	!
    }
    canvas c1
    iconcoords {298.0 318.0}
    labelcoords {298.0 350.0}
    interface-peer {eth1 n7}
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/ion', )
	files=('setup.sh', )
	cmdup=('sh ./setup.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:setup.sh
	custom-command setup.sh
	config {
	foo=`dirname $SESSION_FILENAME`
	sh $foo/generalSetup.sh
	ifconfig eth0 broadcast 10.0.0.255
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 10.0.0.1
	#/sbin/ip route add 3ffe:4::/64 via 2001::1
	/sbin/ip route add 10.0.1.0/24 via 10.0.5.6
	
	
	}
    }
    custom-config {
	custom-config-id service:zebra
	custom-command zebra
	config {
	files=('/usr/local/etc/quagga/Quagga.conf', 'quaggaboot.sh', '/usr/local/etc/quagga/vtysh.conf', )
	}
    }
    custom-config {
	custom-config-id service:zebra:/usr/local/etc/quagga/Quagga.conf
	custom-command /usr/local/etc/quagga/Quagga.conf
	config {
	interface eth0
	  ip address 10.0.0.6/24
	  ipv6 address 2001::1/64
	  ipv6 ospf6 instance-id 65
	!
	router ospf6
	  router-id 10.0.0.1
	  interface eth0 area 0.0.0.0
	!
	
	}
    }
    services {zebra OSPFv3MDR vtysh IPForward StaticRoute SSH UserDefined}
    interface-peer {eth0 n1}
}

node n7 {
    type wlan
    network-config {
	hostname wlan7
	!
	interface wireless
	 ipv6 address 2001:5::0/128
	 ip address 10.0.5.0/24
	!
	mobmodel
	coreapi
	basic_range
	ns2script
	!
    }
    custom-config {
	custom-config-id basic_range
	custom-command {3 3 9 9 9}
	config {
	range=200
	bandwidth=1000000
	jitter=0
	delay=20000
	error=0
	}
    }
    custom-config {
	custom-config-id ns2script
	custom-command {10 3 11 10 10 10 10 10}
	config {
	file=
	refresh_ms=50
	loop=1
	autostart=0.0
	map=
	script_start=
	script_pause=
	script_stop=
	}
    }
    canvas c1
    iconcoords {411.0 70.0}
    labelcoords {411.0 102.0}
    interface-peer {e0 n2}
    interface-peer {e4 n6}
    interface-peer {e5 n8}
}

node n8 {
    type router
    model mdr
    network-config {
	hostname n8
	!
	interface eth0
	 ipv6 address 2001:5::6/128
	 ip address 10.0.5.6/24
	!
    }
    canvas c1
    iconcoords {448.0 215.0}
    labelcoords {448.0 247.0}
    interface-peer {eth0 n7}
    services {IPForward StaticRoute SSH UserDefined}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	/sbin/ip route add 10.0.0.0/24 via 10.0.5.5
	/sbin/ip route add 10.0.1.0/24 via 10.0.5.1
	
	}
    }
    custom-config {
	custom-config-id service:UserDefined
	custom-command UserDefined
	config {
	dirs=('/var/ion', )
	files=('setup.sh', )
	cmdup=('sh ./setup.sh', )
	}
    }
    custom-config {
	custom-config-id service:UserDefined:setup.sh
	custom-command setup.sh
	config {
	foo=`dirname $SESSION_FILENAME`
	sh $foo/generalSetup.sh
	}
    }
}

node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth0
	 ip address 10.0.0.1/24
	 ipv6 address 2001:0::1/64
	!
    }
    canvas c1
    iconcoords {73.0 318.0}
    labelcoords {73.0 350.0}
    interface-peer {eth0 n6}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	/sbin/ip route add 10.0.1.0/24 via 10.0.0.2
	#/sbin/ip route add 3ffe:4::/64 via 2001::1
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.0.2
	
	
	}
    }
    services {zebra OSPFv2 OSPFv3 vtysh IPForward DefaultRoute StaticRoute SSH}
}

node n3 {
    type router
    model router
    network-config {
	hostname n3
	!
	interface eth0
	 ip address 10.0.1.2/24
	 ipv6 address 2001:1::2/64
	!
    }
    canvas c1
    iconcoords {805.0 315.0}
    labelcoords {805.0 347.0}
    interface-peer {eth0 n2}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	/sbin/ip route add 10.0.0.0/24 via 10.0.1.1
	#/sbin/ip route add 3ffe:4::/64 via 2001:1::1
	
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute
	custom-command DefaultRoute
	config {
	files=('defaultroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:DefaultRoute:defaultroute.sh
	custom-command defaultroute.sh
	config {
	#!/bin/sh
	# auto-generated by DefaultRoute service (utility.py)
	ip route add default via 10.0.1.1
	
	
	}
    }
    services {zebra OSPFv2 OSPFv3 vtysh IPForward DefaultRoute StaticRoute SSH}
}

link l6 {
    nodes {n7 n2}
}

link l10 {
    nodes {n7 n6}
}

link l11 {
    nodes {n7 n8}
}

link l1 {
    nodes {n1 n6}
    bandwidth 0
}

link l2 {
    nodes {n2 n3}
    bandwidth 0
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names yes
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels yes
    show_api no
    background_images no
    annotations yes
    grid yes
    traffic_start 0
}

option session {
    controlnet=192.168.5.0/24
    controlnet_updown_script=
    enablerj45=1
    enablesdt=0
    preservedir=0
    sdturl=tcp://127.0.0.1:50000/
}

